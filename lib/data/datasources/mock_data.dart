import '../models/meal.dart';
import '../models/vendor.dart';
import '../models/subscription.dart';
import '../models/order.dart';

class MockData {
  static final List<Vendor> vendors = [
    const Vendor(
      id: 'v1',
      name: 'Fresh Bites Kitchen',
      logoUrl: 'https://example.com/fresh-bites-logo.png',
      rating: 4.5,
      area: 'Downtown',
      cuisines: ['American', 'Mediterranean', 'Fusion'],
      serviceAreas: ['Downtown', 'Midtown'],
      isOpen: true,
      avgPrepMinutes: 25,
      deliveryFee: 2.99,
      minOrderValue: 15.0,
    ),
    const Vendor(
      id: 'v2',
      name: 'Healthy Harvest',
      logoUrl: 'https://example.com/healthy-harvest-logo.png',
      rating: 4.8,
      area: 'Midtown',
      cuisines: ['Vegetarian', 'Vegan', 'Plant-based'],
      serviceAreas: ['Midtown', 'Uptown'],
      isOpen: true,
      avgPrepMinutes: 20,
      deliveryFee: 3.49,
      minOrderValue: 12.0,
    ),
    const Vendor(
      id: 'v3',
      name: 'Protein Palace',
      logoUrl: 'https://example.com/protein-palace-logo.png',
      rating: 4.3,
      area: 'Uptown',
      cuisines: ['American', 'High-Protein', 'Keto'],
      serviceAreas: ['Uptown', 'Westside'],
      isOpen: false,
      avgPrepMinutes: 30,
      deliveryFee: 2.49,
      minOrderValue: 18.0,
    ),
    const Vendor(
      id: 'v4',
      name: 'Veggie Delight',
      logoUrl: 'https://example.com/veggie-delight-logo.png',
      rating: 4.6,
      area: 'Westside',
      cuisines: ['Vegetarian', 'Vegan', 'Indian'],
      serviceAreas: ['Westside', 'Downtown'],
      isOpen: true,
      avgPrepMinutes: 22,
      deliveryFee: 3.99,
      minOrderValue: 10.0,
    ),
  ];

  static final List<Meal> meals = [
    Meal(
      id: 'm1',
      vendorId: 'v1',
      title: 'Grilled Chicken Breast with Quinoa',
      description:
          'Tender grilled chicken breast served with fluffy quinoa and seasonal vegetables',
      imageUrl: 'https://example.com/chicken-quinoa.jpg',
      price: 18.99,
      currency: 'INR',
      calories: 450,
      macros: const Macros(protein: 35, carbs: 45, fat: 12),
      allergens: ['Soy'],
      tags: ['High-Protein', 'Low-Fat', 'Gluten-Free'],
      cuisine: 'American',
      isVeg: false,
      spiceLevel: 1,
      portionSizeGrams: 350,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 2, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 3, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 4, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 5, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 6, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 0, start: '12:00', end: '21:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 25, max: 40),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm2',
      vendorId: 'v1',
      title: 'Salmon with Roasted Vegetables',
      description:
          'Fresh Atlantic salmon with colorful roasted vegetables and herbs',
      imageUrl: 'https://example.com/salmon-veggies.jpg',
      price: 22.99,
      currency: 'INR',
      calories: 520,
      macros: const Macros(protein: 38, carbs: 28, fat: 28),
      allergens: ['Fish'],
      tags: ['Omega-3', 'High-Protein', 'Low-Carb'],
      cuisine: 'Mediterranean',
      isVeg: false,
      spiceLevel: 0,
      portionSizeGrams: 400,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 2, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 3, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 4, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 5, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 6, start: '11:00', end: '22:00'),
        AvailabilityWindow(day: 0, start: '12:00', end: '21:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 25, max: 40),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm3',
      vendorId: 'v2',
      title: 'Turkey Meatballs with Zucchini Noodles',
      description:
          'Lean turkey meatballs served over spiralized zucchini noodles',
      imageUrl: 'https://example.com/turkey-meatballs.jpg',
      price: 16.99,
      currency: 'INR',
      calories: 380,
      macros: const Macros(protein: 32, carbs: 18, fat: 18),
      allergens: ['Egg'],
      tags: ['Low-Carb', 'High-Protein', 'Keto-Friendly'],
      cuisine: 'American',
      isVeg: false,
      spiceLevel: 2,
      portionSizeGrams: 320,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 2, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 3, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 4, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 5, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 6, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 0, start: '11:00', end: '20:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 20, max: 35),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm4',
      vendorId: 'v2',
      title: 'Quinoa Buddha Bowl',
      description:
          'Nutritious quinoa bowl with roasted vegetables and tahini dressing',
      imageUrl: 'https://example.com/quinoa-bowl.jpg',
      price: 14.99,
      currency: 'INR',
      calories: 420,
      macros: const Macros(protein: 18, carbs: 65, fat: 12),
      allergens: ['Nuts'],
      tags: ['Vegetarian', 'High-Fiber', 'Plant-Based'],
      cuisine: 'Plant-based',
      isVeg: true,
      spiceLevel: 1,
      portionSizeGrams: 380,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 2, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 3, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 4, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 5, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 6, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 0, start: '11:00', end: '20:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 20, max: 35),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm5',
      vendorId: 'v3',
      title: 'Beef Stir Fry with Brown Rice',
      description:
          'Tender beef strips stir-fried with vegetables and brown rice',
      imageUrl: 'https://example.com/beef-stir-fry.jpg',
      price: 19.99,
      currency: 'INR',
      calories: 580,
      macros: const Macros(protein: 42, carbs: 55, fat: 22),
      allergens: ['Soy', 'Gluten'],
      tags: ['High-Protein', 'Balanced', 'Asian-Fusion'],
      cuisine: 'Asian',
      isVeg: false,
      spiceLevel: 3,
      portionSizeGrams: 450,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '11:00', end: '23:00'),
        AvailabilityWindow(day: 2, start: '11:00', end: '23:00'),
        AvailabilityWindow(day: 3, start: '11:00', end: '23:00'),
        AvailabilityWindow(day: 4, start: '11:00', end: '23:00'),
        AvailabilityWindow(day: 5, start: '11:00', end: '23:00'),
        AvailabilityWindow(day: 6, start: '11:00', end: '23:00'),
        AvailabilityWindow(day: 0, start: '12:00', end: '22:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 30, max: 45),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm6',
      vendorId: 'v4',
      title: 'Tofu Scramble with Sweet Potato',
      description: 'Scrambled tofu with roasted sweet potato and spinach',
      imageUrl: 'https://example.com/tofu-scramble.jpg',
      price: 12.99,
      currency: 'INR',
      calories: 320,
      macros: const Macros(protein: 22, carbs: 38, fat: 8),
      allergens: ['Soy'],
      tags: ['Vegetarian', 'Vegan', 'Breakfast'],
      cuisine: 'Indian',
      isVeg: true,
      spiceLevel: 2,
      portionSizeGrams: 300,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 2, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 3, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 4, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 5, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 6, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 0, start: '09:00', end: '19:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 22, max: 35),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm7',
      vendorId: 'v4',
      title: 'Greek Yogurt Parfait',
      description: 'Creamy Greek yogurt with granola and fresh berries',
      imageUrl: 'https://example.com/yogurt-parfait.jpg',
      price: 8.99,
      currency: 'INR',
      calories: 280,
      macros: const Macros(protein: 24, carbs: 32, fat: 6),
      allergens: ['Dairy', 'Nuts'],
      tags: ['Breakfast', 'High-Protein', 'Probiotic'],
      cuisine: 'Mediterranean',
      isVeg: true,
      spiceLevel: 0,
      portionSizeGrams: 250,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 2, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 3, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 4, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 5, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 6, start: '08:00', end: '20:00'),
        AvailabilityWindow(day: 0, start: '09:00', end: '19:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 15, max: 25),
      nutritionSource: 'vendor_provided',
    ),
    Meal(
      id: 'm8',
      vendorId: 'v2',
      title: 'Lentil Soup with Whole Grain Bread',
      description: 'Hearty lentil soup served with whole grain bread',
      imageUrl: 'https://example.com/lentil-soup.jpg',
      price: 11.99,
      currency: 'INR',
      calories: 340,
      macros: const Macros(protein: 18, carbs: 52, fat: 8),
      allergens: ['Gluten'],
      tags: ['Vegetarian', 'High-Fiber', 'Comfort-Food'],
      cuisine: 'Mediterranean',
      isVeg: true,
      spiceLevel: 1,
      portionSizeGrams: 400,
      availabilityWindows: [
        AvailabilityWindow(day: 1, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 2, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 3, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 4, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 5, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 6, start: '10:00', end: '21:00'),
        AvailabilityWindow(day: 0, start: '11:00', end: '20:00'),
      ],
      etaMinutesRange: EtaMinutesRange(min: 20, max: 35),
      nutritionSource: 'vendor_provided',
    ),
  ];

  static final List<Order> mockOrders = [
    Order(
      id: 'order_1',
      userId: 'user_1',
      items: [
        OrderItem(
          mealId: 'm1',
          vendorId: 'v1',
          qty: 2,
          unitPrice: 18.99,
          lineTotal: 37.98,
        ),
      ],
      subtotal: 37.98,
      deliveryFee: 2.99,
      total: 40.97,
      address: '123 Main St, Downtown',
      geo: GeoLocation(lat: 40.7128, lng: -74.0060),
      slot: '19:00-20:00',
      notes: 'Please ring doorbell',
      status: 'delivered',
      deliveredAt: DateTime.now().subtract(const Duration(days: 1)),
      createdAt: DateTime.now().subtract(const Duration(days: 1, hours: 2)),
    ),
    Order(
      id: 'order_2',
      userId: 'user_1',
      items: [
        OrderItem(
          mealId: 'm3',
          vendorId: 'v2',
          qty: 1,
          unitPrice: 16.99,
          lineTotal: 16.99,
        ),
      ],
      subtotal: 16.99,
      deliveryFee: 3.49,
      total: 20.48,
      address: '123 Main St, Downtown',
      geo: GeoLocation(lat: 40.7128, lng: -74.0060),
      slot: '18:00-19:00',
      status: 'delivered',
      deliveredAt: DateTime.now().subtract(const Duration(days: 3)),
      createdAt: DateTime.now().subtract(const Duration(days: 3, hours: 1)),
    ),
  ];

  static final List<SubscriptionPlan> subscriptionPlans = [
    const SubscriptionPlan(
      id: 'sp1',
      code: 'Basic',
      price: 0.0,
      perks: ['Basic meal tracking', 'Calorie counting', 'Order history'],
    ),
    const SubscriptionPlan(
      id: 'sp2',
      code: 'Plus',
      price: 9.99,
      perks: [
        'Everything in Basic',
        'Macro tracking',
        'Allergen information',
        'Nutrition insights',
        'Meal recommendations',
      ],
    ),
    const SubscriptionPlan(
      id: 'sp3',
      code: 'Pro',
      price: 19.99,
      perks: [
        'Everything in Plus',
        'AI meal planning',
        'Meal swapping',
        'Cheat day compensation',
        'Personal nutritionist',
        'Advanced analytics',
      ],
    ),
  ];

  static final List<String> allergenTypes = [
    'Gluten',
    'Nuts',
    'Dairy',
    'Soy',
    'Egg',
    'Shellfish',
    'Fish',
    'Wheat',
  ];

  static final List<String> mealTags = [
    'High-Protein',
    'Low-Carb',
    'Low-Fat',
    'Vegetarian',
    'Vegan',
    'Gluten-Free',
    'Keto-Friendly',
    'Breakfast',
    'Lunch',
    'Dinner',
    'Snack',
    'Comfort-Food',
    'Asian-Fusion',
    'Mediterranean',
    'Mexican',
    'Italian',
    'Indian',
    'Balanced',
    'Plant-Based',
    'Probiotic',
    'Omega-3',
    'High-Fiber',
  ];

  static final List<String> cuisineTypes = [
    'American',
    'Italian',
    'Mexican',
    'Asian',
    'Mediterranean',
    'Indian',
    'Middle Eastern',
    'Latin American',
    'European',
    'Fusion',
    'Plant-based',
  ];
}
